files
g
slotNames(g)
getName(g)
name(g)
g@name
for (i,j in c(1,2,3), c(3,4,5)) {
system.time({1:100})
system.time({1:100})[1]
system.time({1:100})[2]
system.time({1:100})[4]
TH()
TH()
f
d
TH()
dim(d)
TH()
assertError(d[,1:12])
TH()
ds2
ds2
ds2
ds2[]
ds2[] == ds2M[]
all(ds2[] == ds2M[])
ds2[1:5]
ds2[1:5] == ds2[1:5]
ds2M[1:5] == ds2[1:5]
TH()
TH
TH()
a
b
c
a
a[]
b[]
b[] == 1:7
oc
c
c[]
c[]
ds2
ds2[]
ds3
ds3
ds3[]
ds3
ds3[]
ds3M[]
xx = ds3[]
xx[]
id3
id3
f()
f()
TH()
TH()
TH()
TH("gg", FALSE)
TH()
TH("throw-error")
source("/home/NANOFLUIDICS/jbullard/projects/software/R/common/h5r/tests/testall.R")
TH()
TH(throw-error = TRUE)
TH(throwError = TRUE)
TH("a", FALSE)
TH(throwError = TRUE)
TH("a", FALSE)
TH(throwError = TRUE)
TH
TH("a", TRUE)
TH()
TH(action = "print")
TH("b", FALSE)
TH(action = "print")
TH(action = "throw")
?tryCatch
TH("b", FALSE)
TH(action = "throw")
TH("b", FALSE)
TH(action = "throw")
simpleError()
simpleError("sdf")
TH("b", FALSE)
TH(action = "throw")
q()
n
source("/home/NANOFLUIDICS/jbullard/projects/software/R/common/h5r/tests/testall.R")
source("/home/NANOFLUIDICS/jbullard/projects/software/R/common/h5r/tests/testall.R")
TH("aa", FALSE)
TH(action = "throw")
TH()
TH(action = "print")
dim(ds6
)
ds6
TH(action = "print")
runif(3, c(1,2,3), c(2,3,4))
ls()
b
d
ds2
ds4
ds4[1:3, 1:2]
ds4[1:2, 1]
call(ds4[1:2, 1])
expression(ds4[1:2, 1])
substitute(ds4[1:2, 1])
as.call(ds4[1:2, 1])
?call
call("[", ds4, 1:2, 1)
eval(call("[", ds4, 1:2, 1))
eval(call("[", ds4, list(1:2, 1)))
eval(call("[", ds4, 1:2, 1))
call("[", ds4, 1:2, 1)
as.call(call("[", ds4, 1:2, 1))
as.list(call("[", ds4, 1:2, 1))
as.call(as.list(call("[", ds4, 1:2, 1)))
as.list(call("[", ds4))
xx = as.list(call("[", ds4))
xx[[3]] <- 1:2
xx[[4]] <- 1
xx
as.call(xx)
eval(as.call(xx))
randomSlice(ds2)
randomSlice(ds2)
randomSlice(ds2)
n
dims
ds2
Q
ls()
ds4
randomSlice(ds4)
c
randomSlice(ds4)
randomSlice(ds4)
randomSlice(ds4)
randomSlice(ds4)
randomSlice(ds4)
randomSlice(ds4)
replicate(100, randomSlice(ds4))
q()
n
ds7
