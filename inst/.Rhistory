diLong
readSlab(diLong, 1, 100)
diLong[1:100]
seq.int(10000, 10)
gc()
gc()
time()
date()
?date
Sys.time()
?system.time
proc.time()
d3
d2
q()
n
d2
nrow(d)
debug("readSlab")
n
offsets + dims
offsets + dims - 1
Q
d2
gc()
emptyenv()
length(emptyenv())
?callNextMethod
?emptyenv
setUnion
setClassUnion
?setClassUnion
?setClassUnion
readSlab
ls()
d
d2
readSlab(d2, c(1,1), c(1000, 10))
length(readSlab(d2, c(1,1), c(1000, 10)))
length(readSlab(d2, c(5,5), c(1000, 10)))
length(readSlab(d2, c(1,5), c(1000, 5)))
d
d[1:10]
d[]
d
d[1:10]
d2[1:10]
d2[,] = d[,]
c(1,2,3,4)[]
d
d@.data
d2@.data
d2@.data$.data
b
dM
dMM
dM
dM[] == dMM
dM[] == dMM[]
dM[] == t(dMM[])
dim(dM[])
dim(dMM[])
dM
dM[1:5, 2]
dMM[1:5, 2]
dM[1,2]
dM[1:4,2]
dMM[1:10, 2]
dM[1:10, 2]
dM[1:10, 2] == dMM[1:10, 2]
dM[1:5, 2] == dMM[1:999, 2]
dMM[1:999, 2]
dM[1:999, 2]
dim(d3)
dim(d3M)
d3
d3[1,,]
debug(.internalSlice)
debug(h5r:::.internalSlice)
debug(h5r:::.internalSlice)
h5R:::.inMemory(d3)
d3
d3@.data
d3M@.data
d3M@.data$.data
d3
d3M
traceback()
d3M@.data$data[,,]
d3M@.data$data
debug(h5r:::.internalSlice)
traceback()
c
n
dim(x)
n
i
d
c
n
x@.data$.data
n
class(d)
 drop
d[i, j, ..., drop = FALSE]
dim(d)
Q
?callNextMethod
traceback()
a = function(a, ...) { list(...) }
a(1)
c
x
c
n
n
n
n
...
missing(...)
list(...)
class(...)
mode(...)
length(...)
?missing
substitute(...)
length(substitute(...))
class(substitute(...))
Q
?promise
?substitue
?substitute
n
n
ext
n
n
sel[,1]
sel
dim(x)
l
sel
Q
n
readSlab(x, rev(sel[, 1]), rev(ext))
Q
n
n
n
readSlab(x, rev(sel[, 1]), rev(ext))
